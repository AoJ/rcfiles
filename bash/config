# SETUP RUBYGEMS
if [ -d ~/.gem/ruby/1.8 ]; then
  export GEM_PATH="$HOME/.gem/ruby/1.8"
  export GEM_HOME="$HOME/.gem/ruby/1.8"
fi
export RUBYOPT=rubygems


# HISTORY CONTROL
# don't put duplicate lines in the history. See bash(1) for more options
# don't overwrite GNU Midnight Commander's setting of `ignorespace'.
export HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups

# ... or force ignoredups and ignorespace
export HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# Include dot (.) files in the results of expansion
shopt -s dotglob
# Case-insensitive matching for filename expansion
shopt -s nocaseglob
# Enable extended pattern matching
shopt -s extglob

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Define some colors first:
red='\[\e[0;31m\]'
RED='\[\e[1;31m\]'
green='\[\e[0;32m\]'
GREEN='\[\e[1;32m\]'
yellow='\[\e[0;33m\]'
YELLOW='\[\e[1;33m\]'
grey='\[\e[0;37m\]'
NC='\[\e[0m\]'              # No Color
BOLD='\[\e[1m\]'

#####################################
# Prompt
#####################################

# Simple BASH function that shortens
# a very long path for display by removing
# the left most parts and replacing them
# with a leading ...
#
# the first argument is the path
#
# the second argument is the maximum allowed
# length including the '/'s and ...
#
shorter_pwd()
 {
  x=${PWD}
  len=${#x}
  max_len=$1

  if [ $len -gt $max_len ]
  then
      # finds all the '/' in
      # the path and stores their
      # positions
      #
      pos=()
      for ((i=0;i<len;i++))
      do
          if [ "${x:i:1}" == "/" ]
          then
              pos=(${pos[@]} $i)
          fi
      done
      pos=(${pos[@]} $len)

      # we have the '/'s, let's find the
      # left-most that doesn't break the
      # length limit
      #
      i=0
      while [ $((len-pos[i])) -gt $((max_len-3)) ]
      do
          i=$((i+1))
      done

      # let us check if it's OK to
      # print the whole thing
      #
      if [ ${pos[i]} == 0 ]
      then
          # the path is shorter than
          # the maximum allowed length,
          # so no need for ...
          #
          echo ${x}

      elif [ ${pos[i]} == $len ]
      then
          # constraints are broken because
          # the maximum allowed size is smaller
          # than the last part of the path, plus
          # '...'
          #
          echo ...${x:((len-max_len+3))}
      else
          # constraints are satisfied, at least
          # some parts of the path, plus ..., are
          # shorter than the maximum allowed size
          #
          echo ...${x:pos[i]}
      fi
  else
      echo ${x}
  fi
 }


## Get git branch
function current_git_branch {
    branch_name="$(git symbolic-ref HEAD 2>/dev/null)" || branch_name=""
    branch_name=${branch_name##refs/heads/}
    echo $branch_name | sed -e "s/^/ /" -e "s/ master//" -e "s/^ $//"
}

function get_remote_hostname {
  [[ -n $SSH_CLIENT ]] && echo "$(hostname) " 
}

PS1="${yellow}$(get_remote_hostname)${NC}${BOLD}\$(shorter_pwd 50)${green}\$(current_git_branch) \$ ${NC}"  # simple prompt

PS1="\[\e]0;\u@\h: \w\a\]$PS1" # simple title



#####################################
# runs right before welcome scn
#####################################

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"
